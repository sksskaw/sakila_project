<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gd.sakila.mapper.RentalMapper">
	<select id="selectRentalList" parameterType="map" resultType="com.gd.sakila.vo.Rental">
		SELECT rental_id rentalId, 
			   rental_date rentalDate, 
			   inventory_id inventoryId, 
			   customer_id customerId, 
			   return_date returnDate,
			   staff_id staffId, 
			   last_update lastUpdate
		  FROM rental
		  <where>
			<if test="returnDateOption != 0">
				return_date IS NULL
			</if>
			<if test="searchNum != null">
				AND customer_id LIKE #{searchNum}
			</if>
		 </where>
		 LIMIT #{beginRow},#{rowPerPage}
	</select>
	
	<select id="selectRentalListTotal" parameterType="map" resultType="int">
		SELECT COUNT(*)
		  FROM rental
		  <where>
			<if test="returnDateOption != 0">
				return_date IS NULL
			</if>
			<if test="searchNum != null">
				AND customer_id LIKE #{searchNum}
			</if>
		 </where>
	</select>

	<insert id="insertRental" parameterType="map">
	INSERT INTO rental(rental_date,inventory_id,customer_id,staff_id)
		 VALUES (NOW(), #{inventoryId}, #{customerId}, #{staffId})
		 <selectKey resultType="int" keyProperty="rentalId" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>
	
	<insert id="insertPayment" parameterType="map">
	INSERT INTO payment(customer_id,staff_id,rental_id,amount,payment_date)
		 VALUES (#{customerId}, #{staffId}, #{rentalId}, #{amount}, NOW())
	</insert>
	
	<select id="selectReturnNullList" resultType="com.gd.sakila.vo.Rental" parameterType="Integer">
		SELECT rental_id rentalId,
			   rental_date rentalDate,
			   inventory_id inventoryId,
			   customer_id customerId,
			   return_date returnDate,
			   staff_id staffId,
			   last_update lastUpdate
		  FROM rental
		 WHERE return_date IS NULL
			<if test="searchNum != null">
				AND customer_id LIKE #{searchNum}
			</if>
		 LIMIT #{beginRow},#{rowPerPage}
	</select>
	
	<select id="selectReturnNullTotal" resultType="int">
		SELECT COUNT(*)
		  FROM rental
		 WHERE return_date IS NULL
	</select>
	
	<update id="updateReturnDate" parameterType="int">
		UPDATE rental
		   SET return_date = NOW() 
		 WHERE rental_id = #{rentalId}
	</update>

	<select id="selectOverdueFeeByKey" parameterType="int" resultType="int">
		SELECT DATEDIFF(NOW(), r.rental_date) - CAST(f.rental_duration AS SIGNED) AS overdueFee
		  FROM rental r, inventory i, film f
		 WHERE r.inventory_id = i.inventory_id AND i.film_id = f.film_id
			   AND r.rental_id = #{rentalId}
	</select>
	
	<update id="updateAmountByKey" parameterType="map">
		UPDATE payment 
		   SET amount = amount + #{overdueFee} 
		 WHERE rental_id = #{rentalId}
	</update>
	
	<update id="updatePaymentDateByKey" parameterType="map">
		UPDATE payment 
		   SET payment_date = NOW()
		 WHERE rental_id = #{rentalId}
	</update>
</mapper>